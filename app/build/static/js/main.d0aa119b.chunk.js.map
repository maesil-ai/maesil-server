{"version":3,"sources":["secret.ts","components/Header.tsx","components/Footer.tsx","pages/Home.tsx","utility/poseCalculator.ts","utility/draw.ts","utility/score.ts","components/Screen.tsx","pages/Exercise.tsx","components/Title.tsx","components/StatView.tsx","pages/Result.tsx","pages/Playground.tsx","routes/index.tsx","serviceWorker.ts","index.tsx"],"names":["apiAddress","Header","to","Footer","Home","props","loadExercises","a","axios","get","then","response","exerciseData","data","result","exercises","id","name","url","exercise","push","exercise_id","title","video_url","setState","state","catch","error","onItemSelect","event","select","target","value","console","log","this","options","map","key","onChange","React","Component","defaultConfig","algorithm","model","architecture","multiplier","outputStride","inputResolution","quantBytes","flipPoseHorizontal","multiPose","maxPoseDetections","minPartConfidence","nmsRadius","PoseCalculator","video","config","poseNet","readyToUse","modelInUse","resultPoses","record","load","posenet","getPoseResult","length","poses","estimatePoses","flipHorizontal","decodingMethod","pose","concat","maxDetections","scoreThreshold","allPoses","toTuple","pos","y","x","drawPoint","ctx","r","color","beginPath","arc","Math","PI","fillStyle","fill","drawSegment","ay","ax","by","bx","scale","offsetx","offsety","moveTo","lineTo","lineWidth","strokeStyle","stroke","drawSkeleton","keypoints","minConfidence","adjacentKeyPoints","forEach","position","drawKeypoints","i","keypoint","score","drawBoundingBox","boundingBox","rect","minX","minY","maxX","maxY","posePoseSimilarity","modelPose","userPose","similarity","poseSimilarity","strategy","exerciseScore","scoreMatrix","Array","from","j","startY","startX","scoreSum","diagonalCnt","Screen","canvas","views","viewConfig","drawCanvas","play","drawVideoPose","offset","showVideo","save","translate","videoWidth","drawImage","videoHeight","restore","minPoseConfidence","showPoints","showSkeleton","showBoundingBox","executeEveryFrame","callback","requestAnimationFrame","clearRect","calculator","createRef","finishCount","Object","assign","onended","onExerciseFinish","time","calorie","current","getContext","promises","Promise","all","ref","width","height","defaultProps","Exercise","guideVideo","userVideo","loadVideo","loadStream","navigator","mediaDevices","getUserMedia","audio","facingMode","componentDidMount","guideSource","userStream","src","srcObject","resolve","cnt","incrementCnt","onloadeddata","isLoading","handleExerciseFinish","post","code","redirectToResult","isFinished","match","params","pathname","playTime","videos","crossOrigin","style","display","Title","StatView","className","round","Result","method","exerciseName","loading","stats","location","timeToString","sec0","sec1","min0","min1","hr0","Playground","path1","path2","videoA","videoB","onChange1","e","onChange2","onButtonClick","onEnded","placeholder","onClick","Root","exact","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d0aa119b.chunk.js","sourcesContent":["const apiAddress = 'http://13.209.193.142:8080';\n\nexport default apiAddress;\n","import React from 'react';\n\nimport {Link} from 'react-router-dom';\n\n\nfunction Header() {\n  return (\n    <header>\n      <Link to=\"/\">\n        매실\n      </Link>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\n\n/**\n * Footer HTML 변환\n * @return {any} Footer HTML\n */\nfunction Footer() {\n  return (\n    <footer>\n            © SW마에스트로 11기 코드블루팀\n    </footer>\n  );\n}\n\nexport default Footer;\n","import apiAddress from '../secret';\n\n// @ts-ignore\nimport axios from 'axios';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\n\ninterface HomeProps {\n\n};\n\ninterface exercise {\n    id: number,\n    name: string,\n    url: string,\n};\n\ninterface HomeState {\n    exercises: exercise[],\n    select: number,\n};\n\n/**\n * 홈 클래스 (메인 화면, 추천 화면 담당) 페이지\n * @param {any} event\n * @class Home\n * @extends {React.Component<HomeProps, HomeState>}\n */\nclass Home extends React.Component<HomeProps, HomeState> {\n  /**\n   * Creates an instance of Home.\n   * @param {HomeProps} props\n   * @memberof Home\n   */\n  constructor(props : HomeProps) {\n    super(props);\n    this.state = {\n      exercises: [],\n      select: -1,\n    };\n  }\n\n  loadExercises = async () => {\n    axios.get(\n        apiAddress + '/exercises/',\n    ).then((response) => {\n      const exerciseData = response.data.result;\n      const exercises : exercise[] = [{\n        id: -1,\n        name: '눌러서 선택해주세요!',\n        url: '',\n      }];\n      for (const exercise of exerciseData) {\n        exercises.push({\n          id: exercise.exercise_id,\n          name: exercise.title,\n          url: exercise.video_url,\n        });\n      }\n      this.setState({\n        ...this.state,\n        exercises: exercises,\n      });\n    }).catch((error) => {\n\n    });\n  }\n\n  /**\n   * 기본 함수\n   * @memberof Home\n   */\n  componentDidMount() {\n    this.loadExercises();\n  }\n\n  onItemSelect = (event : any) => {\n    this.setState({\n      ...this.state,\n      select: event.target.value,\n    });\n    console.log(event.target.value);\n  }\n\n  /**\n   * Home 페이지를 렌더링하는 함수\n   * @return {any} 렌더될 HTML 코드\n   * @memberof Home\n   */\n  render() {\n    const options = this.state.exercises.map(({id, name, url}, key) =>\n      (<option value={id} key={key}> {name} </option>));\n    return (\n      <div>\n        <Header/>\n        <select onChange = { this.onItemSelect }>\n          { options }\n        </select>\n        <Link to={'/exercise/' +\n          (this.state.select === -1 ? '' : this.state.select)}>\n          <button>\n                      Pose estimation.. 해볼래?\n          </button>\n        </Link>\n        <Footer/>\n      </div>\n    );\n  }\n};\n\nexport default Home;\n","import * as posenet from '@tensorflow-models/posenet';\n\ninterface Config {\n    algorithm: string,\n    model: posenet.ModelConfig,\n    flipPoseHorizontal: boolean,\n    multiPose: {\n        maxPoseDetections: number,\n        minPartConfidence: number,\n        nmsRadius: number,\n    }\n};\n\nconst defaultConfig : Config = {\n  algorithm: 'single-pose',\n  model: {\n    architecture: 'MobileNetV1',\n    multiplier: 0.75, // isMobile() ? 0.5 : 0.75,\n    outputStride: 16,\n    inputResolution: 250,\n    quantBytes: 2,\n  },\n  flipPoseHorizontal: false,\n  multiPose: {\n    maxPoseDetections: 5,\n    minPartConfidence: 0.1,\n    nmsRadius: 30.0,\n  },\n};\n\nexport type Pose = posenet.Pose;\n\n// const defaultResNetMultiplier = 1.0;\n// const defaultResNetStride = 32;\n// const defaultResNetInputResolution = 250;\n\n/**\n * PoseCalculator 클래스\n * @class PoseCalculator\n */\nclass PoseCalculator {\n    video : HTMLVideoElement;\n    poseNet : posenet.PoseNet;\n    config : Config;\n    readyToUse : boolean;\n    modelInUse : boolean;\n    resultPoses : posenet.Pose[];\n    record : posenet.Pose[];\n\n    /**\n     * Creates an instance of PoseCalculator.\n     * @param {HTMLVideoElement} video\n     * @param {*} [config=defaultConfig]\n     * @memberof PoseCalculator\n     */\n    constructor(video : HTMLVideoElement, config = defaultConfig) {\n      this.video = video;\n      this.config = config;\n      this.modelInUse = true;\n      this.readyToUse = false;\n      this.resultPoses = [];\n      this.record = [];\n    }\n\n    load = async () => {\n      const poseNet = await posenet.load(this.config.model);\n      this.poseNet = poseNet;\n      this.modelInUse = false;\n      this.readyToUse = true;\n    }\n\n    // 기존의 applyPosenetChange는 'on...Change'식의 함수로 사용할 것.\n\n    getPoseResult = async () => {\n      if (this.modelInUse) {\n        if (this.record.length > 0) this.record.push(this.record[this.record.length-1]);\n        return false;\n      }\n\n      this.modelInUse = true;\n\n      let poses : posenet.Pose[] = [];\n\n      switch (this.config.algorithm) {\n        case 'single-pose':\n          const pose = await this.poseNet.estimatePoses(this.video, {\n            flipHorizontal: this.config.flipPoseHorizontal,\n            decodingMethod: 'single-person',\n          });\n          poses = poses.concat(pose);\n          break;\n\n        case 'multi-pose':\n          const allPoses = await this.poseNet.estimatePoses(this.video, {\n            flipHorizontal: this.config.flipPoseHorizontal,\n            decodingMethod: 'multi-person',\n            maxDetections: this.config.multiPose.maxPoseDetections,\n            scoreThreshold: this.config.multiPose.minPartConfidence,\n            nmsRadius: this.config.multiPose.nmsRadius,\n          });\n\n          poses = poses.concat(allPoses);\n          break;\n      }\n\n      if (poses[0]) this.record.push(poses[0]);\n\n      this.resultPoses = poses;\n      this.modelInUse = false;\n\n      return true;\n    }\n};\n\nexport default PoseCalculator;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Modifications copyright (C) 2020 Maesil.AI\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as posenet from '@tensorflow-models/posenet';\nimport * as tf from '@tensorflow/tfjs';\n\nconst color = 'aqua';\nconst boundingBoxColor = 'red';\nconst lineWidth = 1;\n\n/**\n * 접속한 기기가 Android인지 판단\n * @return {boolean} Android면 true 반환\n */\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\n/**\n * 접속한 기기가 iOS인지 판단\n * @return {boolean} iOS면 true 반환\n */\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\n/**\n * 접속한 기기가 모바일인지 판단\n * @export\n * @return {boolean} 모바일이면 true 반환\n */\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\n\n/**\n * pos를 받아서 튜블로 변환\n * @param {*} pos\n * @return {[number, number]}\n */\nfunction toTuple(pos : any) : [number, number] {\n  return [pos.y, pos.x];\n}\n\n/**\n * 주어진 keypoint를 점으로 찍어주는 함수\n * @export\n * @param {*} ctx 캔버스\n * @param {*} y y\n * @param {*} x x\n * @param {*} r r\n * @param {*} color color\n */\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\n/**\n * 주어진 점을 바탕으로 키포인트를 이어 캔버스에 선을 그려주는 함수(관절)\n * @export\n * @param {*} ay ay\n * @param {*} by by\n * @param {any} color 색\n * @param {any} ctx 캔버스\n * @param {number} [scale=1] 크기\n * @param {any} offsetx 시작 x\n * @param {any} offsety 시작 y\n */\nexport function drawSegment(\n    [ay, ax],\n    [by, bx],\n    color,\n    ctx,\n    scale = 1,\n    [offsetx, offsety] = [0, 0],\n) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale + offsetx, ay * scale + offsety);\n  ctx.lineTo(bx * scale + offsetx, by * scale + offsety);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n * @export\n * @param {posenet.Keypoint[]} keypoints\n * @param {number} minConfidence\n * @param {CanvasRenderingContext2D} ctx\n * @param {number} [scale=1]\n * @param {*} offsetx\n * @param {*} offsety\n */\nexport function drawSkeleton(\n    keypoints: posenet.Keypoint[],\n    minConfidence: number,\n    ctx: CanvasRenderingContext2D,\n    scale = 1,\n    [offsetx, offsety] = [0, 0],\n) {\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\n      keypoints,\n      minConfidence,\n  );\n\n  adjacentKeyPoints.forEach((keypoints) => drawSegment(\n      toTuple(keypoints[0].position),\n      toTuple(keypoints[1].position),\n      color,\n      ctx,\n      scale,\n      [offsetx, offsety]),\n  );\n}\n\n/**\n * Draw pose keypoints onto a canvas\n * @export\n * @param {posenet.Keypoint[]} keypoints\n * @param {number} minConfidence\n * @param {CanvasRenderingContext2D} ctx\n * @param {number} [scale=1]\n * @param {*} offsetx default=0\n * @param {*} offsety default=0\n */\nexport function drawKeypoints(\n    keypoints: posenet.Keypoint[],\n    minConfidence: number,\n    ctx: CanvasRenderingContext2D,\n    scale = 1,\n    [offsetx, offsety] = [0, 0],\n) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const {y, x} = keypoint.position;\n    drawPoint(ctx, y * scale + offsety, x * scale + offsetx, 3, color);\n  }\n}\n\n/**\n * Draw the bounding box of a pose. For example, for a whole person standing\n * in an image, the bounding box will begin at the nose and extend to one of\n * ankles\n * @export\n * @param {posenet.Keypoint[]} keypoints\n * @param {CanvasRenderingContext2D} ctx\n * @param {number} [scale=1]\n * @param {*} offsetx default=0\n * @param {*} offsety default=0\n */\nexport function drawBoundingBox(\n    keypoints: posenet.Keypoint[],\n    ctx: CanvasRenderingContext2D,\n    scale = 1,\n    [offsetx, offsety] = [0, 0],\n) {\n  const boundingBox = posenet.getBoundingBox(keypoints);\n\n  ctx.rect(\n      scale * boundingBox.minX + offsetx,\n      scale * boundingBox.minY + offsety,\n      scale * (boundingBox.maxX - boundingBox.minX),\n      scale * (boundingBox.maxY - boundingBox.minY),\n  );\n\n  ctx.strokeStyle = boundingBoxColor;\n  ctx.stroke();\n}\n/**\n * Converts an arary of pixel data into an ImageData object\n * @export\n * @param {*} a\n * @param {*} ctx\n */\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Draw an image on a canvas\n * @export\n * @param {*} image\n * @param {*} size\n * @param {*} canvas\n */\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext('2d');\n\n  ctx.drawImage(image, 0, 0);\n}\n\n/**\n * Draw heatmap values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's heatmap outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n * @export\n * @param {*} heatMapValues\n * @param {*} outputStride\n * @param {*} canvas\n */\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext('2d');\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, 'int32'));\n\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n/**\n * Used by the drawHeatMapValues method to draw heatmap points on to\n * the canvas\n * @param {*} ctx\n * @param {*} points\n * @param {*} radius\n * @param {*} color\n */\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n","import {poseSimilarity} from 'posenet-similarity';\nimport * as posenet from '@tensorflow-models/posenet';\n/**\n * view에서 포즈를 추출하는 함수\n * @export\n * @param {*} view\n * @return {*} pose\n */\nexport function extractPose(view) {\n  if (!view || !view.poses || !view.poses.poses) return null;\n  // if (!view.poses.hasOwnProperty('poses')) return null;\n  if (view.poses.poses.length > 1) {\n    console.log('multi person detected');\n    return null;\n  }\n  return view.poses.poses[0];\n}\n\n/**\n * 두 프레임을 받아서 유사도를 리턴\n * @export\n * @param {*} modelPose 모델 포즈\n * @param {*} userPose 유저 포즈\n * @return {*} score 유사도\n */\nexport function posePoseSimilarity(modelPose, userPose) {\n  // 0일수록 비슷 아마 1넘어가기 힘들듯?\n  // return poseSimilarity(modelPose, userPose, {strategy: 'weightedDistance'});\n  // 0일수록 비슷 0~2사이 값\n  // return poseSimilarity(modelPose, userPose, {strategy: 'cosineDistance'});\n  // -1~1 사이 값, -1이면 방향 완전 반대, 1이면 완전 똑같음\n  const bias = 0.5;\n  const weight = 1 / (1 - bias);\n  const similarity = poseSimilarity(modelPose, userPose, {strategy: 'cosineSimilarity'});\n  if (typeof similarity == 'number') {\n    return (((1+similarity)/2) - bias) * weight;\n  }\n  return 0;\n}\n\n/**\n *  views를 받아서 현재 프레임의 점수를 계산\n * @export\n * @param {*} views Screen.views (view[])\n * @return {*} 포즈 정확도 -1: 현재 모델이 제대로 측정 안됨, 0~1 값 점수\n */\nexport async function scorePoseSimilarity(views) {\n  if (views.length !== 2) return -1;\n  const modelPose= extractPose(views[0]);\n  const userPose = extractPose(views[1]);\n  if (modelPose == null) return -1;\n  if (userPose == null) return 0;\n\n  return posePoseSimilarity(modelPose, userPose);\n}\n\n/**\n * modelPose와 userPose의 배열을 받이서 전체 운동에 대한 점수를 return\n * @export\n * @param {*} modelPose posenet.Pose[],\n * @param {*} userPose posenet.Pose[]\n * @return {*} score\n */\nexport function exerciseScore(modelPose: posenet.Pose[],\n    userPose: posenet.Pose[]) {\n  let score = 0;\n\n  const scoreMatrix = Array.from(Array(modelPose.length),\n      () => new Array(userPose.length));\n\n  const minimumCoverage = 0.7;\n  for (let i = 0; i < modelPose.length; i++) {\n    for (let j = 0; j < userPose.length; j++) {\n      scoreMatrix[i][j] = posePoseSimilarity(modelPose[i], userPose[j]);\n    }\n  }\n\n  // 대각선으로 보면서 평균 Sim이 제일 높은 얘를 찾음\n  let startY = modelPose.length - 1;\n  let startX = 0;\n  for (; startX < userPose.length; (startY > 0 ? startY-- : startX++)) {\n    let x = startX;\n    let y = startY;\n    let scoreSum = 0;\n    const diagonalCnt = modelPose.length - startY;\n    if (diagonalCnt / (modelPose.length) < minimumCoverage) {\n      continue;\n    }\n\n    for (; y < modelPose.length; y++, x++) {\n      scoreSum += scoreMatrix[y][x];\n    }\n    if (score < scoreSum / diagonalCnt) {\n      score = scoreSum / diagonalCnt;\n    }\n  }\n  return score;\n}\n\n\n/**\n *\n *\n * @export\n * @param {posenet.Pose[]} modelPose\n * @param {posenet.Pose[]} userPose\n * @return s\n */\nexport function checkOneTime(modelPose: posenet.Pose[],\n  userPose: posenet.Pose[]) {\n    const minScore = 0.7;\n    const similarity = exerciseScore(modelPose, userPose);\n    if (similarity < minScore) return true;\n    return false;\n}\n","import React from 'react';\nimport PoseCalculator, { Pose } from '../utility/poseCalculator';\nimport {\n  drawBoundingBox,\n  drawKeypoints,\n  drawSkeleton,\n} from '../utility/draw';\nimport { exerciseScore } from '../utility/score';\n\ninterface View {\n    video: HTMLVideoElement,\n    scale: number,\n    offset: [number, number],\n    calculator?: PoseCalculator,\n};\n\ninterface ViewConfig {\n  flipPoseHorizontal: boolean,\n  showVideo: boolean,\n  showSkeleton: boolean,\n  showPoints: boolean,\n  showBoundingBox: boolean,\n  minPoseConfidence: number,\n  minPartConfidence: number,\n};\n\nconst defaultViewConfig = {\n  flipPoseHorizontal: false,\n  showVideo: true,\n  showSkeleton: true,\n  showPoints: true,\n  showBoundingBox: true,\n  minPoseConfidence: 0.15,\n  minPartConfidence: 0.1,\n};\n\ninterface ScreenProps {\n    videoWidth: number,\n    videoHeight: number,\n    views: View[],\n    viewConfig: ViewConfig,\n    onExerciseFinish: (record: any) => any,\n    match?: any,\n};\n\ninterface ScreenState {\n  finishCount: number,\n};\n\n\n/**\n * Screen 클래스\n * 운동하고 있는 화면을 보여주는 스크린\n * @class Screen\n * @extends {React.Component<ScreenProps, ScreenState>}\n */\nclass Screen extends React.Component<ScreenProps, ScreenState> {\n    static defaultProps : ScreenProps = {\n      videoWidth: 800,\n      videoHeight: 600,\n      views: [],\n      onExerciseFinish: () => {},\n      viewConfig: defaultViewConfig,\n    };\n\n    ctx: CanvasRenderingContext2D;\n    canvas: React.RefObject<HTMLCanvasElement>;\n    views: View[];\n    viewConfig: ViewConfig;\n\n    /**\n     * Creates an instance of Screen.\n     * @param {ScreenProps} props\n     * @memberof Screen\n     */\n    constructor(props: ScreenProps) {\n      super(props);\n\n      this.canvas = React.createRef<HTMLCanvasElement>();\n      this.viewConfig = this.props.viewConfig;\n      this.views = this.props.views;\n      this.state = {\n        finishCount: 0,\n      };\n\n      for (let i=0; i<this.views.length; i++) {\n        Object.assign(this.views[i], {\n          calculator: new PoseCalculator(this.views[i].video),\n        });\n\n        this.views[i].video.onended = () => {\n          let finishCount = this.state.finishCount + 1;\n          this.setState({\n            finishCount: finishCount,\n          });\n\n          if (finishCount === 1) {\n            this.props.onExerciseFinish({\n              score: exerciseScore(this.views[0].calculator.record, this.views[1].calculator.record),\n              time: 63*60,\n              calorie: 1021,\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * 리액트 컴포넌트 클래스 기본 함수\n     * @memberof Screen\n     */\n    componentDidMount() {\n      this.ctx = this.canvas.current!.getContext('2d')!;\n      let promises : Promise<void>[] = [];\n      for (let i=0; i<this.views.length; i++) {\n        promises.push(this.views[i].calculator.load());\n      }\n\n      Promise.all(promises).then(() => {\n        this.drawCanvas();\n      });\n    }\n\n    drawCanvas = () => {\n      const ctx = this.ctx!;\n\n      for (let i=0; i<this.views.length; i++) {\n        this.views[i].video.play();\n      }\n\n      const drawVideoPose = (video: CanvasImageSource, poses: Pose[], scale = 1,\n          offset: [number, number] = [0, 0]) => {\n        const ctx = this.ctx!;\n\n        if (this.viewConfig.showVideo) {\n          ctx.save();\n          ctx.translate(this.viewConfig.flipPoseHorizontal ?\n            (scale * this.props.videoWidth) : 0, 0);\n          ctx.scale(this.viewConfig.flipPoseHorizontal ? -1 : 1, 1);\n          ctx.drawImage(\n              video,\n              (this.viewConfig.flipPoseHorizontal ? -1 : 1) * offset[0],\n              offset[1],\n              this.props.videoWidth * scale,\n              this.props.videoHeight * scale,\n          );\n          ctx.restore();\n        }\n\n        if (poses) {\n          poses.forEach(({score, keypoints}) => {\n            if (score >= this.viewConfig.minPoseConfidence) {\n              if (this.viewConfig.showPoints) {\n                drawKeypoints(keypoints,\n                    this.viewConfig.minPartConfidence, ctx, scale, offset);\n              }\n              if (this.viewConfig.showSkeleton) {\n                drawSkeleton(keypoints,\n                    this.viewConfig.minPartConfidence, ctx, scale, offset);\n              }\n              if (this.viewConfig.showBoundingBox) {\n                drawBoundingBox(keypoints, ctx, scale, offset);\n              }\n            }\n          });\n        }\n      };\n\n      /**\n       * 매 프레임 마다 다시 콜백으로 자기를 불러서 무한반복으로 실행\n       * @param {*} callback 자기자신\n       */\n      function executeEveryFrame(callback) {\n        //            stats.begin();\n        callback();\n        //            stats.end();\n\n        requestAnimationFrame(() => {\n          executeEveryFrame(callback);\n        });\n      }\n\n      executeEveryFrame(() => {\n        ctx.clearRect(0, 0, this.props.videoWidth, this.props.videoHeight);\n        for (let i = 0; i < this.views.length; i++) {\n          this.views[i].calculator.getPoseResult();\n          drawVideoPose(this.views[i].video,\n              this.views[i].calculator.resultPoses,\n              this.views[i].scale,\n              this.views[i].offset);\n        }\n      });\n    }\n\n    /**\n     * 직접 실행할일은 없음, 지원하지 않을때는 뜨는 함수\n     * @return {any} HTML 반환\n     * @memberof Screen\n     */\n    render() {\n      return (\n        <div>\n          <canvas\n            ref={this.canvas}\n            width={this.props.videoWidth}\n            height={this.props.videoHeight}\n          >\n            운동 기능이 지원되지 않는 브라우저입니다..ㅠㅠ\n          </canvas>\n        </div>\n      );\n    }\n}\n\n\nexport default Screen;\n","import apiAddress from '../secret';\n\n// @ts-ignore\nimport axios from 'axios';\nimport React from 'react';\nimport Screen from '../components/Screen';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport {Redirect} from 'react-router-dom';\n\ninterface ExerciseProps {\n  videoWidth: number,\n  videoHeight: number,\n  match?: any,\n  history?: any,\n};\n\ninterface Record {\n  score: number,\n  playTime: number,\n  calorie: number,\n};\n\ninterface ExerciseState {\n  isLoading: boolean,\n  isFinished: boolean,\n  redirectToResult: boolean,\n\n  id: number,\n\n  record: Record | null,\n\n  url?: string,\n};\n\n/**\n * 시간(숫자)을 string으로 변환하는 함수\n * @param {number} time\n * @return {string} 시간을 DB에 저장하기 좋게 string으로 변환\n */\n// function timeToString(time : number) {\n//   const sec0 = time % 10;\n//   time = (time - sec0) / 10;\n//   const sec1 = time % 6;\n//   time = (time - sec1) / 6;\n//   const min0 = time % 10;\n//   time = (time - min0) / 10;\n//   const min1 = time % 6;\n//   time = (time - min1) / 6;\n//   const hr0 = time % 10;\n//   time = (time - hr0) / 10;\n//   const hr1 = time % 10;\n\n//   return `${hr1}${hr0}:${min1}${min0}:${sec1}${sec0}`;\n// }\n\n/**\n * Excerciese 페이지\n * @class Exercise\n * @extends {React.Component<ExerciseProps, ExerciseState>}\n */\nclass Exercise extends React.Component<ExerciseProps, ExerciseState> {\n  guideVideo = React.createRef<HTMLVideoElement>();\n  userVideo = React.createRef<HTMLVideoElement>();\n  \n  static defaultProps = {\n    videoWidth: 800,\n    videoHeight: 600,\n  };\n\n  /**\n   * Creates an instance of Exercise.\n   * @param {ExerciseProps} props\n   * @memberof Exercise\n   */\n  constructor(props : ExerciseProps) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      isFinished: false,\n      redirectToResult: false,\n      id: props.match.params.id,\n      record: null,\n    };\n  }\n\n\n  /**\n   * id로 서버에 비디오를 요청해서 url을 받아옴\n   * @param {number} id\n   * @return {*} 비디오의 url\n   */\n  loadVideo = async (id : number) => {\n    const response = await axios.get(apiAddress + '/exercises/' + id);\n    return response.data.result.video_url;\n  }\n\n  loadStream = async () => {\n    return await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        facingMode: 'user',\n        width: this.props.videoWidth,\n        height: this.props.videoHeight,\n      },\n    });\n  }\n\n  componentDidMount = () => {\n    const guideSource = this.loadVideo(this.state.id);\n    const userStream = this.loadStream();\n\n    Promise.all([guideSource, userStream]).then(([guideSource, userStream]) => {\n          const guideVideo = this.guideVideo.current!;\n          const userVideo = this.userVideo.current!;\n          guideVideo.src = guideSource;\n          userVideo.srcObject = userStream;\n\n          new Promise((resolve) => {\n            let cnt = 0;\n            const incrementCnt = () => {\n              cnt += 1;\n              if (cnt >= 2) resolve();\n            };\n            guideVideo.onloadeddata = incrementCnt;\n            userVideo.onloadeddata = incrementCnt;\n          }).then(() => this.setState({\n            ...this.state,\n            isLoading: false,\n          }));\n        });\n  };\n\n  handleExerciseFinish = (record: Record) => {\n    console.log(\"HI!!!!\");\n    axios.post(apiAddress + '/exercises/' + this.state.id + '/history', {\n      'score': record.score,\n      'play_time': \"00:01:03\",\n      'cal': record.calorie,\n    }).then((response) => {\n      console.log(response);\n      // response.data.code != 200이면?\n      if (response.data.code === 200) {\n        this.setState({\n          ...this.state,\n          record: record,\n          redirectToResult: true,\n        });\n      } else {\n        console.log('ㅋㅋ..;;');\n      }\n    }).catch((error) => {\n      console.log('ㅋㅋ..ㅈㅅ!!ㅎㅎ..');\n    });\n  }\n\n  /**\n   * 운동 페이지를 렌더링 해서 보여줌\n   * @return {any} 운동 페이지 HTML\n   * @memberof Exercise\n   */\n  render() {\n    if (this.state.redirectToResult) {\n      return <Redirect push to={{\n        pathname: '/result',\n        state: {\n          score: this.state.record.score,\n          time: this.state.record.playTime,\n          calorie: this.state.record.calorie,\n        },\n      }}/>;\n    }\n    const videos = (\n      <div>\n        <video\n          height={this.props.videoHeight}\n          width={this.props.videoWidth}\n          crossOrigin={'anonymous'}\n          style={{display: 'none'}}\n          ref={this.guideVideo}\n        />\n        <video\n          height={this.props.videoHeight}\n          width={this.props.videoWidth}\n          crossOrigin={'anonymous'}\n          style={{display: 'none'}}\n          ref={this.userVideo}\n        />\n      </div>\n    );\n\n    if (this.state.isLoading) {\n      return (\n        <div>\n          <Header/>\n          { videos }\n              운동 불러오는 중...\n          <Footer/>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Header/>\n          { videos }\n          <Screen\n            onExerciseFinish = { this.handleExerciseFinish }\n            videoWidth = { this.props.videoWidth }\n            videoHeight = { this.props.videoHeight }\n            views = {[\n              { // Guide View\n                video: this.guideVideo.current!,\n                scale: 1,\n                offset: [0, 0],\n              },\n              { // User View\n                video: this.userVideo.current!,\n                scale: 0.3,\n                offset: [540, 400],\n              },\n            ]}\n          />\n          <Footer/>\n        </div>\n      );\n    }\n  }\n};\n\nexport default Exercise;\n","import React from 'react';\n\ninterface TitleProps {\n  title : string,\n};\n\n/**\n * 타이틀 컴포넌트 결과창 위에 있는 타이틀\n * @param {TitleProps} {title}\n * @return {HTML} title div\n */\nfunction Title({title} : TitleProps) {\n  return (\n    <div id={'title'} >\n      { title }\n    </div>\n  );\n}\n\nexport default Title;\n","import React from 'react';\n\ninterface StatViewProps {\n    time: number,\n    calorie: number,\n    score: number,\n};\n\n/**\n * 결과창 페이지 인자로 보여줄 스탯값을 넘겨주고 예쁘게 출력\n * @param {StatViewProps} {time, calorie, score}\n * @return {any} HTML 페이지\n */\nfunction StatView({time, calorie, score} : StatViewProps) {\n  return (\n    <div className={'boxContainer'}>\n      <div className={'box'}> {(time - time%60) / 60}분 {time%60}초 </div>\n      <div className={'box'}> {Math.round(calorie)}칼로리 소모 </div>\n      <div className={'box'}> {Math.round(score*100)}점 </div>\n    </div>\n  );\n}\n\nStatView.defaultProps = {\n  time: 63,\n  calorie: 0,\n  score: 0,\n};\n\nexport default StatView;\n","import apiAddress from '../secret';\n\n// @ts-ignore\nimport axios from 'axios';\nimport React from 'react';\n\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport Title from '../components/Title';\nimport StatView from '../components/StatView';\n\ninterface Stats {\n    time: number,\n    calorie: number,\n    score: number,\n};\n\ninterface ResultProps {\n    exerciseId : number,\n    location: any,\n};\n\ninterface ResultState {\n    loading : boolean,\n    exerciseName? : string,\n    stats: Stats,\n};\n\n/**\n * Result 페이지\n * @class Result\n * @extends {React.Component<ResultProps, ResultState>}\n */\nclass Result extends React.Component<ResultProps, ResultState> {\n\n  /**\n   *Creates an instance of Result.\n    * @param {*} props\n    * @memberof Result\n    */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      stats: {\n        time: this.props.location.state.time,\n        calorie: this.props.location.state.calorie,\n        score: this.props.location.state.score,\n      },  \n    };\n  }\n\n  componentDidMount = () => {\n    axios({\n      method: 'GET',\n      url: apiAddress + '/exercises/' + 1,\n    }).then((response) => {\n      const exerciseName = response.data.result.title;\n\n      this.setState({\n        ...this.state,\n        loading: false,\n        exerciseName: exerciseName,\n      });\n    }).catch((error) => {\n      console.log('ㅋㅋ');\n    });\n  }\n\n  /**\n   * result페이지를 렌더링 하는 함순\n   * @return {any} 렌더링 될 HTML\n   * @memberof Result\n   */\n  render() {\n    if (this.state.loading) {\n      return (\n        <div>\n          <Header/>\n                  결과를 불러오는 중입니다...\n          <Footer/>\n        </div>\n      );\n    } else {\n      let stats = this.state.stats;\n\n      return (\n        <div>\n          <Header/>\n          <Title title={ this.state.exerciseName + ' 완료!' } />\n          <StatView time={ stats.time }\n            calorie={ stats.calorie }\n            score={ stats.score } />\n              다음 코스도 추천해 주자~\n          <Footer/>\n        </div>\n      );\n    }\n  }\n};\n\nexport default Result;\n","import apiAddress from '../secret';\n\n// @ts-ignore\nimport axios from 'axios';\nimport React from 'react';\nimport Screen from '../components/Screen';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport {Redirect} from 'react-router-dom';\n\ninterface PlaygroundProps {\n  videoWidth: number,\n  videoHeight: number,\n  match?: any,\n  history?: any,\n};\n\ninterface PlaygroundState {\n    isLoading: boolean,\n    isFinished: boolean,\n    redirectToResult: boolean,\n\n    id: number,\n\n    score: number,\n    time: number,\n    calorie: number,\n\n    url?: string,\n};\n\n/**\n * 시간(숫자)을 string으로 변환하는 함수\n * @param {number} time\n * @return {string} 시간을 DB에 저장하기 좋게 string으로 변환\n */\nfunction timeToString(time : number) {\n  const sec0 = time % 10;\n  time = (time - sec0) / 10;\n  const sec1 = time % 6;\n  time = (time - sec1) / 6;\n  const min0 = time % 10;\n  time = (time - min0) / 10;\n  const min1 = time % 6;\n  time = (time - min1) / 6;\n  const hr0 = time % 10;\n  time = (time - hr0) / 10;\n  const hr1 = time % 10;\n\n  return `${hr1}${hr0}:${min1}${min0}:${sec1}${sec0}`;\n}\n\n/**\n * Excerciese 페이지\n * @class Exercise\n * @extends {React.Component<PlaygroundProps, PlaygroundState>}\n */\nclass Playground extends React.Component<PlaygroundProps, PlaygroundState> {\n  guideVideo = React.createRef<HTMLVideoElement>();\n  userVideo = React.createRef<HTMLVideoElement>();\n  path1 = \"\";\n  path2 = \"\";\n  \n  static defaultProps = {\n    videoWidth: 800,\n    videoHeight: 600,\n  };\n\n  /**\n   * Creates an instance of Exercise.\n   * @param {PlaygroundProps} props\n   * @memberof Exercise\n   */\n  constructor(props : PlaygroundProps) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      isFinished: false,\n      redirectToResult: false,\n      id: props.match.params.id,\n      score: 10.21,\n      time: 63,\n      calorie: 731,\n    };\n  }\n\n\n  loadVideo = () => {\n    const videoA = this.path1;\n    const videoB = this.path2;\n\n    Promise.all([videoA, videoB]).then(([videoA, videoB]) => {\n          const guideVideo = this.guideVideo.current!;\n          const userVideo = this.userVideo.current!;\n          guideVideo.src = videoA;\n          guideVideo.play();\n          userVideo.src = videoB;\n          userVideo.play();\n\n          new Promise((resolve) => {\n            let cnt = 0;\n            const incrementCnt = () => {\n              cnt += 1;\n              if (cnt >= 2) resolve();\n            };\n            guideVideo.onloadeddata = incrementCnt;\n            userVideo.onloadeddata = incrementCnt;\n          }).then(() => this.setState({\n            ...this.state,\n            isLoading: false,\n          }));\n        });\n  };\n\n  /**\n   * 운동이 끝날때 실행될 함수\n   * @param {*} data 넘겨줄 데이터\n   * @memberof Exercise\n   */\n  handleExerciseFinish = (data) => {\n    axios.post(apiAddress + '/exercises/' + this.state.id + '/history', {\n      'score': this.state.score,\n      'play_time': timeToString(this.state.time),\n      'cal': this.state.calorie,\n    }).then((response) => {\n      // response.data.code != 200이면?\n      if (response.data.code === 200) {\n        this.setState({\n          ...this.state,\n          redirectToResult: true,\n        });\n      } else {\n        console.log('ㅋㅋ..;;');\n      }\n    }).catch((error) => {\n      console.log('ㅋㅋ..ㅈㅅ!!ㅎㅎ..');\n    });\n  }\n\n  onChange1 = (e) => {\n    this.path1 = e.target.value;\n  }\n\n  onChange2 = (e) => {\n    this.path2 = e.target.value;\n  }\n\n  onButtonClick = (e) => {\n    this.loadVideo();\n  }\n\n  /**\n   * 운동 페이지를 렌더링 해서 보여줌\n   * @return {any} 운동 페이지 HTML\n   * @memberof Exercise\n   */\n  render() {\n    if (this.state.redirectToResult) {\n      return <Redirect push to={{\n        pathname: '/result',\n        state: {\n          score: this.state.score,\n          time: this.state.time,\n          calorie: this.state.calorie,\n        },\n      }}/>;\n    }\n    const videos = (\n      <div>\n        <video\n          height={this.props.videoHeight}\n          width={this.props.videoWidth}\n          crossOrigin={'anonymous'}\n          style={{display: 'none'}}\n          onEnded={this.handleExerciseFinish}\n          ref={this.guideVideo}\n        />\n        <video\n          height={this.props.videoHeight}\n          width={this.props.videoWidth}\n          crossOrigin={'anonymous'}\n          style={{display: 'none'}}\n          ref={this.userVideo}\n        />\n      </div>\n    );\n\n    if (this.state.isLoading) {\n      return (\n        <div>\n          <Header/>\n          { videos }\n            <input onChange={this.onChange1} placeholder={\"첫번째 영상 경로\"} />\n            <input onChange={this.onChange2} placeholder={\"두번째 영상 경로\"} />\n            <button onClick={this.onButtonClick}>실행!!!</button>\n          <Footer/>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Header/>\n          { videos }\n          <Screen\n            videoWidth = { this.props.videoWidth }\n            videoHeight = { this.props.videoHeight }\n            views = {[\n              { // Guide View\n                video: this.guideVideo.current!,\n                scale: 1,\n                offset: [0, 0],\n              },\n              { // User View\n                video: this.userVideo.current!,\n                scale: 0.3,\n                offset: [540, 400],\n              },\n            ]}\n          />\n          <button onClick={ this.handleExerciseFinish }>\n            그냥 결과창 보내기\n          </button>\n          <Footer/>\n        </div>\n      );\n    }\n  }\n};\n\nexport default Playground;\n","import React from 'react';\nimport Home from '../pages/Home';\nimport Exercise from '../pages/Exercise';\nimport Result from '../pages/Result';\nimport Playground from '../pages/Playground';\nimport {BrowserRouter, Switch, Route, Redirect} from 'react-router-dom';\n\nconst Root: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/exercise/:id\" component={Exercise} />\n      <Route path=\"/result\" component={Result} />\n      <Route path=\"/playground\" component={Playground} />\n      <Redirect path=\"*\" to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n/**\n * register 리액트가 자동으로 만든 함수\n * @export\n * @param {Config} [config]\n */\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * registerValidSW\n * @param {string} swUrl\n * @param {Config} [config]\n */\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\n/**\n * checkValidServiceWorker\n * @param {string} swUrl\n * @param {Config} [config]\n */\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\n/**\n * 언레지스터\n * @export\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport Root from './routes/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <Root />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}